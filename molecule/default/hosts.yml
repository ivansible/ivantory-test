---
all:
  hosts:
  # starter:
  #   dev_user_host_secrets:
  #     _http_proxy: "http://192.168.1.1:1080"
  #     _https_proxy: $http_proxy

  ###############################
  vars:
    ## ast_core
    ## 2020-10-23 asterisk.hosting.lv is inaccessible
    ## get_url gets wrong hash and reports false change if dropbox link lacks "?dl=1"
    ast_g729_codec_url: https://www.dropbox.com/s/eut6q762dbys71l/codec_g729-ast130-gcc4-glibc2.2-x86_64-barcelona.so?dl=1

    ## dev_user
    dev_user_group_vars:
      ANSIBLE_FORCE_COLOR: true

    ## lin_base
    hide_secrets: true
    is_permitted: false
    web_group: www-data
    lin_core_time_server: 2.pool.ntp.org  # note: supports both ipv4/ipv6
    lin_go_version: 1.13

    ## lin_core
    lin_core_swap_enable: true

    ## lin_enter
    linen_user: ubuntu
    linen_port: 22
    linen_default_keyfile: files/insecure.key
    linen_keyfile: "{{ linen_default_keyfile }}"
    linen_conn_timeout: 1
    linen_port_timeout: 2
    linen_wait_timeout: 2
    linen_pause_timeout: 3

    ## lin_ferm
    ferm_hosts_internal:
      - 127.0.0.1
    ferm_hosts_block: []

    ## lin_nxserver
    # lin_nxserver_deb_url: 'https://download.nomachine.com/download/6.8/Linux/nomachine_6.8.1_1_amd64.deb'
    ## use nomachine package copy in dropbox for stability of deployments
    lin_nxserver_deb_url: 'https://www.dropbox.com/s/h9n09fyy9q3ihtx/nomachine_6.8.1_1_amd64.deb?dl=1'

    ## lin_ssh
    lin_ssh_known_hosts:
      - github.com
      ## keyscan of gitlab.com causes rate errors
      # - gitlab.com

    ## srv_doh
    srv_doh_zip_url: https://www.dropbox.com/s/gtaf3l8qauv7rh2/doh-proxy-linux-x86_64.zip?dl=1

  children:
    python3:
      vars:
        # Mitogen detects python on docker as /usr/bin/python (python2).
        # When pip module creates virtual environment, it needs setuptools.
        # Normally ansible runs pip3 for that but mitogen runner on target
        # hits setuptools missing with python2 on target and fails with:
        #   ImportError: u'pkg_resources' is present in the Mitogen importer blacklist,
        #   therefore this context will not attempt to request it from the master,
        #   as the request will always be refused.
        #   Failed to import the required Python library (setuptools)
        #   on target's Python /usr/bin/python".
        # fix: explicitly tell mitogen to use python3 on focal.
        ansible_python_interpreter: /usr/bin/python3

    controllers:
      vars:
        ## new_vultr
        vultr_ssh_key_file: files/insecure.key
        vultr_ssh_port: 22
        vultr_username: ubuntu

    ###############################
    molecule:
      children:
        docker_molecule:
          vars:
            ansible_user: ansible
            lin_core_time_sync: false
        local_molecule:
          vars:
            ansible_connection: local
            lin_core_time_sync: true
      vars:
        ## lin_core
        lin_core_system_locale: en_US.UTF-8

        lin_core_swap_enable: false

        allow_sysctl: false

        lin_use_ssh: "{{ lookup('env', 'IVATEST_SSH_SERVER') |d('true', true) |bool }}"
        lin_firewall: "{{ lookup('env', 'IVATEST_FIREWALL') |d('ferm', true) |string }}"
        lin_systemd_tmpfiles: "{{ lookup('env', 'IVATEST_SYSTEMD_TMPFILES') |d('true', true) |bool }}"

        ## lin_docker
        docker_hub_username: ""
        docker_hub_password: ""

        ## dev_user
        lin_ssh_keys_files: [files/insecure.key]
        dev_user_ssh_keys_accept: "{{ lin_ssh_keys_files }}"
        dev_user_ssh_keys_deploy: "{{ lin_ssh_keys_files }}"
        dev_user_ssh_keys_revoke: []

        ## dev_ivantory
        divan_repo: https://github.com/ivansible/ivantory-test.git
        divan_github_token: ""
        divan_password: ""

        ## dev_hosters
        devhost_digitalocean_token: ""

        ## lin_nxserver
        allow_reboot: false

        ## cert_cloudflare:
        certbot_renewal_enable: false
        certbot_certificates: []
        certbot_acme_accounts: []

        ## nginx_base
        nginx_letsencrypt_cert: ""  # force snakeoil certificate all over

        ## ast_core
        ast_time_sync_enable: false
        ast_ssl_cert: "{{ nginx_ssl_cert }}"
        ast_ssl_key: "{{ nginx_ssl_key }}"

        ## lin_dante_auth
        dante_user: dante_test

    ###############################
    permitted:
      children:
        molecule:
      vars:
        ## all
        is_permitted: true

        ## ast_core
        ast_user_agent: Asterisk
        ast_voicemail_pass: 0000

        ast_pg_host: "{{ srv_pg_host }}"
        ast_pg_port: "{{ srv_pg_port }}"
        ast_pg_dbname: asterisk
        ast_pg_user: asterisk
        ast_pg_pass: supersecret
        ast_pg_dump_url: ""

        ast_g729_bench_enable: true
        ast_g729_bench_digium_tarball_url: ""
        ast_g729_bench_free_tarball_url: ""

        ## backup_base
        backup_secret: supersecret

        ## cert_cloudflare
        certbot_group: "{{ web_group }}"
        certbot_cloudflare_email: user@mail.com
        certbot_cloudflare_api_key: supersecret

        certbot_certificates:
          - name: example.com
            active: true
            remove_existing: false
            update_existing: false
            domains:
              - example.com

        certbot_acme_accounts:
          - name: staging
            active: true
            server: acme-staging-v02.api.letsencrypt.org
            account: 00000
            hash: 00000000000000000000000000000000
            creation_date: '2018-08-18T11:22:33Z'
            creation_host: example.com
            key_data:
              _n: 1
              _d: 2
              _p: 3
              _q: 4
              dp: 5
              dq: 6
              qi: 7

        ## db_base
        srv_pg_host: localhost
        srv_pg_port: 5432
        srv_pg_admin_password: supersecret

        mongodb_host: localhost
        mongodb_port: 27017
        mongodb_admin_username: mongoadmin
        mongodb_admin_password: supersecret

        redis_host: redis.example.com
        redis_port_tcp: 6379
        redis_port_ssl: 6377
        redis_password: supersecret

        ## dev_hosters
        devhost_digitalocean_token: supersecret
        devhost_packet_auth_token: supersecret
        devhost_packet_default_project: supersecret

        ## dev_ivantory
        divan_repo: "git@github.com:ivansible/ivantory-test.git"

        divan_cryptor_exe: bin/cryptor
        divan_cryptor_configured_flag: ivacrypt.configured

        divan_check_file: files/check-file
        divan_check_phrase: 'test passphrase'
        divan_password: 'supersecret'

        divan_roles_check_role: ivansible.lin_base
        divan_github_token: ""

        ## dev_packer
        packer_builder_vultr_version: "0.2.2"
        packer_templates_repo: ""

        ## dev_terraform
        terraform_version: '0.12.13'

        terraform_allow_reinstall_plugins: true
        terraform_provisioner_ansible_repo_owner: ivandeex
        terraform_provisioner_ansible_version: 2.2.1-iva03
        terraform_provisioner_ansible_is_tarball: true
        terraform_provider_vultr_repo_owner: ivandeex
        terraform_provider_vultr_version: 0.1.9-iva01

        terraform_plans_repo: ""
        terraform_api_token: ""

        ## dev_user
        dev_user_git_fullname: "Git User"
        dev_user_git_email: "user@mail.com"

        dev_user_group_secrets:
          AESPASS: supersecret
          VULTR_API_KEY: supersecret

        ## dev_vagrant
        vagrant_plugin_list:
          - vagrant-share  # override system plugin, fixes `vagrant plugin update`
          - vagrant-hostmanager
          - vagrant-vbguest
          ## plugins below are rarely needed!
          # - vagrant-aws    # requires nokogiri (binary!)
          # - vagrant-vultr  # faraday gem conflict with aws!
          # - vagrant-azure
          # - vagrant-digitalocean
          # - vagrant-linode
          # - vagrant-managed-servers

        # secrets
        vagrant_cloud_token: ""
        vagrant_files_repo: ""

        ## lin_docker
        # add target user in the docker group
        docker_permit_user: true

        # secrets
        docker_hub_username: user
        docker_hub_password: supersecret
        docker_files_repo: ""

        ## lin_rclone
        lin_rclone_repo_owner: rclone
        lin_rclone_allow_nonroot: false

        lin_rclone_mailru_token: '{"access_token":"secret","token_type":"Bearer","refresh_token":"secret","expiry":"2018-12-31"}'

        lin_rclone_mounts:
          - name: repo
            path: /mnt/rc/repo
            fstab: false
            # logto: /tmp/rclone-repo.log
            token: "{{ lin_rclone_mailru_token |string }}"
            reuse_token: _repo
            ## use special mailru config with speedup disabled for restic
            ## speedup will always fail because all contents is encrypted
            config: |
              type = alias
              remote = _repo:_rc/repo
              [_repo]
              type = mailru
              user = user@mail.ru
              pass = supersecret
              check_hash = true
              speedup_enable = false
              token = [TOKEN]

        ## srv_cgpro
        cgpro_postmaster_password: supersecret

        ## ...because we restore prod and development from the same set of backups!
        # cgpro_restore_urls:
        #  - https://dropbox.com/s/xxx/cgpro-data.20141231.tar.gz.aes?dl=1
        #  - https://dropbox.com/s/xxx/cgpro-mail.20141231.tar.gz.aes?dl=1

        ## custom skin:
        # cgpro_skins:
        #  - name: LookOut
        #    check_file: version
        #    url: https://dropbox.com/s/xxx/LookOut-v3.12g.tar.zip?dl=1
        #    md5sum: xxx

        cgpro_deb_url: https://dropbox.com/s/u4s7d3p7jnquvdx/CGatePro-Linux_6.2-7_amd64.deb?dl=1
        cgpro_favicon_url: https://dropbox.com/s/v7zn6807eauzgmt/yellow-email.ico?dl=1

        ## srv_postgres
        srv_pg_ssl_cert: "{{ nginx_ssl_cert }}"
        srv_pg_ssl_key: "{{ nginx_ssl_key }}"

        srv_pg_timezone: W-SU

        srv_pg_local_subnets:
          - 192.168.0.0/16

        ## srv_redis
        redis_databases: 3

    ###############################
    prod_master_all:
      children:
        prod_master:
    prod_slaves_all:
      children:
        prod_slaves:
    prod_core:
      children:
        prod_master:
        prod_slaves:
    asterisk_servers:
      children:
        molecule:
    # disabled groups
    dev_all:
      children:
        dev_master:
        dev_slaves:
    microservers:

    ###############################
    prod_all:
      children:
        prod_master:
          children:
            molecule:
        prod_slaves:
        prod_test:
      vars:
        ## ast_billing
        ast_billing_secrets:
          - name: pgsql
            username: "{{ ast_pg_user }}"
            password: "{{ ast_pg_pass }}"

        ## ast_core
        ast_ssl_cert: /etc/letsencrypt/live/sip.example.com/fullchain.pem
        ast_ssl_key: /etc/letsencrypt/live/sip.example.com/privkey.pem

        ast_domains:
          - sip.example.com
          - example.com

        ast_softphones:
          - name: phoner4win
            password: supersecret
            exten: 201
            srtp: false
            active: true

        ast_softphones_secure: true
        ast_default_language: en

        # increase qualify timeout to 3 seconds
        ast_qualify_value: '3000'

        ast_ami_port: 25038
        ast_http_port: 25088
        ast_https_port: 25089
        ast_ami_admin_password: supersecret

        ast_default_nat: true  # increases security
        ast_prefer_ipv4: true  # for sipnet.ru (asterisk_providers)

        ast_reject_networks:
          # noicy hackers
          - 192.168.254.0/24

        ast_cpu_quota: 10%

        ## ast_providers
        ast_providers:
          - name: sipnet1
            exten: 1
            host: sipnet.ru
            username: 092345
            password: supersecret
            # transport: udp,tcp
            # codecs: g729,ulaw,alaw
            networks: ['212.53.40.40']
            active: true

        ## ast_soho
        ast_soho_gateway_alias: forfree
        ast_soho_phones_alias: gigasets

        ast_soho_gateway_codecs: g729,g722,ulaw,alaw
        ast_soho_phones_codecs: g729,g722,ulaw,alaw


        ast_soho_gateway_accounts:
          # note: gateway should provide account name when calls us back
          - name: forfree1
            # caller_id: +1-495-123-4567
            username: 12345
            # password: length from 8 to 30, only alpha-numerics
            password: supersecret
            active: true

        ast_soho_gateway_hosts:
          # the first one is used for outward calls
          - sip.forfree.com

        ast_soho_gateway_billing_exten: 1111

        ast_soho_phones:
          - name: gigaset1
            password: supersecret
            exten: 221
            gateway: forfree1
            active: true

        ast_soho_quick_numbers:
          - name: user1
            exten: 111
            number: 79251234567

        ast_soho_gateway_networks:
          - 192.168.253.0/24

        ast_soho_phones_networks:
          ######## TELE2
          - ; https://ipinfo.io/AS12958
          - ;; T2 Mobile LLC
          - 109.94.192.0/20

        ## cert_cloudflare
        # Production ACME v2 API endpoint
        certbot_acme_server: acme-v02.api.letsencrypt.org

        certbot_certificates:
          - name: test.example.com
            active: true
            remove_existing: false
            update_existing: false
            domains:
              - test.example.com
              - "*.test.example.com"

        ## cert_replica
        certbot_group: "{{ web_group }}"
        certbot_master_host: master1

        ## lin_nginx
        nginx_main_site: ""

        # See:
        # https://www.cloudflare.com/ips-v4
        # https://www.cloudflare.com/ips-v6
        nginx_cloudflare_ips:
          - "103.21.244.0/22"
          - "103.22.200.0/22"
          - "103.31.4.0/22"
          - "104.16.0.0/12"
          - "108.162.192.0/18"
          - "131.0.72.0/22"
          - "141.101.64.0/18"
          - "162.158.0.0/15"
          - "172.64.0.0/13"
          - "173.245.48.0/20"
          - "188.114.96.0/20"
          - "190.93.240.0/20"
          - "197.234.240.0/22"
          - "198.41.128.0/17"
          - "2400:cb00::/32"
          - "2405:8100::/32"
          - "2405:b500::/32"
          - "2606:4700::/32"
          - "2803:f800::/32"
          - "2a06:98c0::/29"
          - "2c0f:f248::/32"

        ## lin_nxserver
        lin_nxserver_direct: false

        ## nginx_base
        web_domain: example.com
        nginx_letsencrypt_cert: example.com
        # affects: nginx_ssl_cert nginx_ssl_key

        #
        # nginx configuration snippets
        #
        nginx_conf_pubcookie_server_DISABLE: |
          location = /PubCookie.reply {
              pubcookie_post;
          }
          location = /bye {
              pubcookie_app_id pctest;
              pubcookie_end_session clearLogin;
          }

        nginx_conf_auth_DISABLE: |
          pubcookie_app_id pctest;

        ## srv_cgpro
        cgpro_mail_site: "mail.{{ web_domain }}"

        cgpro_domains:
          - "{{ mail_domain }}"
          - "{{ cgpro_mail_site }}"
          - localhost
          - local
          - mail

        cgpro_master_key: 1234567890000000000000000000000001
        cgpro_enabling_keys: ['123456789000000000000000000002']

        cgpro_port_smtp_ssl: 1465
        cgpro_port_imap: 1143
        cgpro_port_imap_ssl: 1993
        cgpro_port_sip: 15060
        cgpro_port_sip_ssl: 15061
        cgpro_port_ldap: 1389
        cgpro_port_ldap_ssl: 1636

        cgpro_trusted_cacerts:
          - name: Let's Encrypt Authority X3
            serial: 0A0141420000015385736A0B85ECA708
            file: files/letsencrypt-x3.cross-signed.pem

        ## srv_chisel
        srv_chisel_port: 1084
        srv_chisel_web_path: /supersecret/chisel/
        srv_chisel_username: ubuntu1
        srv_chisel_password: supersecret
        srv_chisel_key_seed: supersecret_seed
        srv_chisel_fingerprint: 11:22:33:44:55:66:77:88:99:aa:bb:cc:dd:ee:ff:00

        ## srv_dante
        dante_port: 1080
        dante_direct: false

        ## socks5 probe is possible only in sslh 1.20+, which is not available in
        ## xenial/bionic packages and requires sslh compilation from github sources
        # sslh_socks5_port: "{{ dante_port }}"

        ## dante username must start with 'dante_' (it's a global linux user)
        dante_user: user1
        dante_pass: supersecret

        ## see: https://docs.ansible.com/ansible/latest/user_guide/playbooks_filters.html#hash-filters
        dante_salt: "{{ 12345 |random(seed=inventory_hostname) |string }}"

        ## srv_doh
        srv_doh_upstream_dns: "{{ nginx_resolver |default(nginx_fallback_resolver) |default('127.0.0.1') }}"
        srv_doh_local_port: 1053
        srv_doh_web_path: /supersecret/doh

        ## srv_mongodb
        mongodb_cpu_quota: 25%
        mongodb_mem_quota: 320M
        mongodb_oom_killer: true
        mongodb_ssl_mode: requireSSL

        ## srv_mtproxy
        sslh_anyprot_port: "{{ mtproxy_port }}"

        mtproxy_port: 9876
        mtproxy_secret: 12345678900000000000000000abcdef
        mtproxy_direct: false
        mtproxy_secure: true
        mtproxy_rmdocker: true

        ## srv_squid
        squid_host: "{{ ansible_fqdn }}"
        squid_domain: "{{ squid_host }}"

        squid_port: 1085
        squid_allow_unencrypted: false

        squid_ssl_enable: true
        squid_ssl_port: 1443
        squid_letsencrypt_cert: example.com

        squid_auth_ldap: false
        squid_auth_htpasswd: true
        squid_use_squidguard: false
        squid_cloaking: true

        squid_proxy_users:
          - user: ubuntu1
            pass: supersecret

        squid_cachemgr_password: supersecret

        squid_local_subnets:
          - 192.168.0.0/16
          - fd00::/64

        squid_nopassword_networks:
          - name: internal
            ranges:
              - '192.168.0.0/16'

        squid_domain_rules:
          - name: tor
            domain: onion
            host: torify.local
            localhost: true  # if true, the host will be added to /etc/hosts
            port: 1088

        squid_pac:
          pac_types: "{{ squid_pac_types }}"
          direct_nets:
            - '127.'
            - '192.168.'
          direct_hosts:
            - 'localhost'
          direct_domains:
            - '.direct.localdomain'

        ## srv_ziproxy
        ziproxy_port: 1083
        ziproxy_direct: false
        # colon-separated user:password pair
        # leave empty for no authentication
        ziproxy_userpass: "ubuntu1:supersecret"

    ###############################
    ssh_secure:
      vars:
        ansible_user: ubuntu
        ansible_port: 22
        ansible_ssh_private_key_file: files/insecure.key

        ferm_ports_external:
          - 22/tcp

    ###############################
    vagrant:
      vars:
        ## ast_core
        # prerequisite role: .cert_copy

        # variables derived from nginx_base:
        #   ast_ssl_cert ast_ssl_key

        ast_domains:
          - "{{ web_domain }}"

        # use insecure softphone logins when debugging
        ast_softphones:
          - name: phoner4win
            password: 123
            exten: 104
            srtp: false
            active: true

        ast_softphones_secure: false
        ast_stun_addr: stun.example.com

        ## cert_copy
        # these settings are for development and testing:
        certbot_group: "{{ web_group }}"
        certbot_master_host: zeus

        ## lin_core
        # variables for role ivansible.lin_core in group vagrant
        lin_core_system_locale: en_US.UTF-8
        lin_core_timezone: Europe/Moscow

        ## nginx_base
        web_domain: test.example.com
        nginx_letsencrypt_cert: test.example.com
        # affects: nginx_ssl_cert nginx_ssl_key

        ## srv_cgpro
        cgpro_master_key: 123456789000000000000000000000000001
        cgpro_enabling_keys: ['123456789000000000000000000002']

        # avoid port clashes with local asterisk
        cgpro_port_sip: 15060
        cgpro_port_sip_ssl: 15061

        cgpro_trusted_cacerts:
          - name: Let's Encrypt Authority X3
            serial: 0A0141420000015385736A0B85ECA708
            file: files/letsencrypt-x3.cross-signed.pem

        ## srv_mongodb
        mongodb_cpu_quota: 50%
        mongodb_mem_quota: 256M
        mongodb_oom_killer: true
        mongodb_ssl_mode: requireSSL

        ## vag_ipv6dns
        # cloudflare authentication
        ipv6dns_cf_email: user@mail.com
        ipv6dns_cf_token: 1234567890000000000000000000000abcdef

        ## vag_share
        vag_share_host: 192.168.99.1
        vag_share_name: share1
        vag_share_user: ubuntu1
        vag_share_pass: supersecret
        vag_share_mount: "{{ ansible_user_dir }}/temp/share1"

        ## vag_vbguest
        vag_vbguest_enable: true
        vag_vbguest_freeze_kernel: true
...
